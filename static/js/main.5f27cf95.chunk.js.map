{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","preventDefault","setState","defineProperty","target","name","value","generateBoxes","x","cellStyles","height","state","size","width","Array","from","map","_","i","react_default","a","createElement","className","style","key","h","undefined","l","b","_this$state","triangleContainerStyles","position","triangleStyles","rightStyles","gridTemplateColumns","concat","topStyles","transform","Math","asin","bottomStyles","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f27cf95.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      h: undefined,\n      l: undefined,\n      b: undefined,\n      size: 30\n    };\n  }\n\n  handleChange = e => {\n    e.preventDefault();\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  generateBoxes = x => {\n    const cellStyles = {\n      height: this.state.size,\n      width: this.state.size\n    };\n    return Array.from(new Array(x)).map((_, i) => (\n      <div className=\"cell\" style={cellStyles} key={i} />\n    ));\n  };\n\n  render() {\n    const { l, b, h, size } = this.state;\n\n    const triangleContainerStyles = {\n      height: b * size + \"px\",\n      width: l * size + \"px\",\n      position: \"relative\"\n    };\n\n    const triangleStyles = {\n      height: b * size + \"px\",\n      width: l * size + \"px\"\n    };\n\n    const rightStyles = {\n      height: b * size + \"px\",\n      width: b * size + \"px\",\n      gridTemplateColumns: `repeat( ${b}, 1fr)`\n    };\n\n    const topStyles = {\n      height: h * size + \"px\",\n      width: h * size + \"px\",\n      transform: `rotate(-${Math.asin(b / h)}rad)`,\n      gridTemplateColumns: `repeat( ${h}, 1fr)`\n    };\n\n    const bottomStyles = {\n      height: l * size + \"px\",\n      width: l * size + \"px\",\n      gridTemplateColumns: `repeat( ${l}, 1fr)`\n    };\n\n    return (\n      <div className=\"App\">\n        <h2>Pythagorean Triplets Vizualization</h2>\n\n        <form>\n          <label>\n            Length &nbsp;\n            <input\n              type=\"text\"\n              value={this.state.l}\n              name=\"l\"\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Breath &nbsp;\n            <input\n              type=\"text\"\n              value={this.state.b}\n              name=\"b\"\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Height &nbsp;\n            <input\n              type=\"text\"\n              value={this.state.h}\n              name=\"h\"\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n\n        <div className=\"canvas\">\n          {!l || !b || !h ? (\n            <h3>Provide all the values.</h3>\n          ) : l * l + b * b !== h * h ? (\n            <h3>Not a Pythagorean Triplet.</h3>\n          ) : (\n            <div className=\"triangleContainer\" style={triangleContainerStyles}>\n              <div className=\"posAbs triangle\" style={triangleStyles}>\n                <span className={\"posAbs span-l\"}>{l}</span>\n                <span className={\"posAbs span-b\"}>{b}</span>\n                <span className={\"posAbs span-h\"}>{h}</span>\n              </div>\n              <div className=\"posAbs gridBox right\" style={rightStyles}>\n                {this.generateBoxes(b * b)}\n              </div>\n              <div className=\"posAbs gridBox top\" style={topStyles}>\n                {this.generateBoxes(h * h)}\n              </div>\n              <div className=\"posAbs gridBox bottom\" style={bottomStyles}>\n                {this.generateBoxes(l * l)}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}